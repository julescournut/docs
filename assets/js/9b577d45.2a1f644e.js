"use strict";(self.webpackChunkthelia=self.webpackChunkthelia||[]).push([[7026],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return d}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=o.createContext({}),i=function(e){var n=o.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},m=function(e){var n=i(e.components);return o.createElement(u.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=i(t),d=r,f=p["".concat(u,".").concat(d)]||p[d]||s[d]||a;return t?o.createElement(f,c(c({ref:n},m),{},{components:t})):o.createElement(f,c({ref:n},m))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,c=new Array(a);c[0]=p;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var i=2;i<a;i++)c[i]=t[i];return o.createElement.apply(null,c)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},865:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return l},metadata:function(){return i},toc:function(){return s}});var o=t(7462),r=t(3366),a=(t(7294),t(3905)),c=["components"],l={title:"Commands"},u=void 0,i={unversionedId:"commands/index",id:"commands/index",title:"Commands",description:"Commands use the helpfull console Symfony component. In your module you can define you own command that can be used",source:"@site/docs/commands/index.md",sourceDirName:"commands",slug:"/commands/",permalink:"/docs/docs/commands/",draft:!1,editUrl:"https://github.com/thelia/docs/edit/main/docs/commands/index.md",tags:[],version:"current",frontMatter:{title:"Commands"},sidebar:"myAutogeneratedSidebar",previous:{title:"API",permalink:"/docs/docs/api"},next:{title:"admin:create",permalink:"/docs/docs/commands/admin_create"}},m={},s=[],p={toc:s};function d(e){var n=e.components,t=(0,r.Z)(e,c);return(0,a.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Commands use the helpfull console Symfony component. In your module you can define you own command that can be used\nwith command CLI."),(0,a.kt)("p",null,"To create a Command in Thelia just create a new class that extend ",(0,a.kt)("inlineCode",{parentName:"p"},"Thelia\\Command\\ContainerAwareCommand")," and create these functions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"configure()")," to give a name and optionally a description and parameters"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"execute()")," where go the code to execute")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n\nnamespace MyModule\\Commands;\n\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nuse Thelia\\Command\\ContainerAwareCommand;\n\nclass HelloWorld extends ContainerAwareCommand\n{\n    protected function configure()\n    {\n        $this\n            ->setName("hello:world")\n            ->setDescription("output hello world");\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $output->writeln("Hello world !");\n    }\n}\n')),(0,a.kt)("p",null,"You can now test the results using Thelia CLI tools. Go to your Thelia root directory and use this command :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"php Thelia hello:world\n")),(0,a.kt)("p",null,"Thelia uses all the features of the Symfony \u201ccommand\u201d component, so you can refer to ",(0,a.kt)("a",{parentName:"p",href:"https://symfony.com/doc/current/console.html#creating-a-command"},"this component documentation")," to create your Thelia commands."))}d.isMDXComponent=!0}}]);