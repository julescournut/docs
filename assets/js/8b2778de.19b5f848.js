"use strict";(self.webpackChunkthelia=self.webpackChunkthelia||[]).push([[7634],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3448:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={title:"Events"},c=void 0,l={unversionedId:"events/index",id:"events/index",title:"Events",description:"Thelia dispatch a lot of events during various workflows : account creation, order process, ...",source:"@site/docs/events/index.md",sourceDirName:"events",slug:"/events/",permalink:"/docs/docs/events/",draft:!1,editUrl:"https://github.com/thelia/docs/edit/main/docs/events/index.md",tags:[],version:"current",frontMatter:{title:"Events"},sidebar:"myAutogeneratedSidebar",previous:{title:"Contribute",permalink:"/docs/docs/contribute"},next:{title:"Caching",permalink:"/docs/docs/modules/caching"}},p={},u=[{value:"Native events",id:"native-events",level:3},{value:"Propel events",id:"propel-events",level:3}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Thelia dispatch a lot of events during various workflows : account creation, order process, ...",(0,o.kt)("br",{parentName:"p"}),"\n","You can listen any of this event to add or replace logic.",(0,o.kt)("br",{parentName:"p"}),"\n","More info for Event dispatcher compoenent can be found on ",(0,o.kt)("a",{parentName:"p",href:"https://symfony.com/doc/current/components/event_dispatcher.html"},"Symfony documentation")),(0,o.kt)("p",null,"To do this you have to create an event subscriber, it's just a simple class that implement the ",(0,o.kt)("inlineCode",{parentName:"p"},"EventSubscriberInterface")," with a ",(0,o.kt)("inlineCode",{parentName:"p"},"getSubscribedEvents")," function to choose what event to listen :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace MyModule\\EventListener;\n\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\HttpFoundation\\RequestStack;\nuse Thelia\\Core\\Event\\TheliaEvents;\n\nclass LogoutListener implements EventSubscriberInterface\n{\n    protected $requestStack;\n\n    public function __construct(RequestStack $requestStack)\n    {\n        $this->requestStack = $requestStack;\n    }\n\n\n    public static function getSubscribedEvents($event)\n    {\n        // return the subscribed events, their methods and priorities\n        return [\n            TheliaEvents::CUSTOMER_LOGOUT => ['onCustomerLogout', 30]\n        ];\n    }\n\n    public function onCustomerLogout()\n    {\n       // Do what you want at customer logout\n    }\n}\n")),(0,o.kt)("h3",{id:"native-events"},"Native events"),(0,o.kt)("p",null,"Thelia native events are all listed in ",(0,o.kt)("inlineCode",{parentName:"p"},"TheliaEvents")," class"),(0,o.kt)("h3",{id:"propel-events"},"Propel events"),(0,o.kt)("p",null,"Propel dispatch several events during model lifecycle :"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Constant name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"PRE_SAVE"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Before persisting the object")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"POST_SAVE"),(0,o.kt)("td",{parentName:"tr",align:"left"},"After persisting the object")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"PRE_INSERT"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Before inserting to database")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"POST_INSERT"),(0,o.kt)("td",{parentName:"tr",align:"left"},"After inserting to database")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"PRE_UPDATE"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Before updating the object in database")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"POST_UPDATE"),(0,o.kt)("td",{parentName:"tr",align:"left"},"After updating the object in database")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"PRE_DELETE"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Before deleting the object in database")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"POST_DELETE"),(0,o.kt)("td",{parentName:"tr",align:"left"},"After deleting the object in database")))),(0,o.kt)("p",null,"This constant are accessible to the class of model name suffixed by Event.",(0,o.kt)("br",{parentName:"p"}),"\n","For example to listen product update use this event ",(0,o.kt)("inlineCode",{parentName:"p"},"ProductEvent::POST_UPDATE")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace MyModule\\EventListener;\n\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\HttpFoundation\\RequestStack;\nuse Thelia\\Model\\Event\\ProductEvent;\n\nclass ProductListener implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents($event)\n    {\n        // return the subscribed events, their methods and priorities\n        return [\n            ProductEvent::POST_UPDATE => ['postProductUpdate', 30]\n        ];\n    }\n\n    public function postProductUpdate(ProductEvent $event)\n    {\n        $productModel = $event->getModel();\n       // Do what you want with the product\n    }\n}\n")))}m.isMDXComponent=!0}}]);